var fakeDom = require("testHelpers/fakeDom")();
var ComponentTester = require("testHelpers/componentTester");
var React = require("react");
var ReactDOM = require("react-dom");
var TestUtils = require("react-addons-test-utils");
var assert = require("chai").assert;
var RegisterPage = require("pages/register");
var RouteTester = require("testHelpers/routeTester");
var then = require("testHelpers/then");
describe("RegisterPage", function() {

    describe("RegisterPage Structure", function() {
        before(function(){
            this.component = ComponentTester.renderAndGetOutput(<RegisterPage/>);
            this.componentForm = this.component.props.children;
            this.componentFormEmailInput = this.componentForm.props.children[2].props.children[1].props.children;
            this.componentFormPasswordInput = this.componentForm.props.children[3].props.children[1].props.children;
        });

        it("should have correct id", function() {
            ComponentTester.assert.equal(this.component.props.id, "registerPageContainer");
        });
        it("should be a div", function() {
            ComponentTester.assert.equal(this.component.type, "div");
        });
        it("should have a form as a child", function() {
            ComponentTester.assert.include(this.componentForm, {type : "form"} );
            ComponentTester.assert.include(this.componentForm.props, {id: "registerForm"});
        });
        it("should have an email input with correct ref and type", function() {
            ComponentTester.assert.equal(this.componentFormEmailInput.type, "input");
            ComponentTester.assert.equal(this.componentFormEmailInput.ref, "emailInput");
            ComponentTester.assert.include(this.componentFormEmailInput.props, {type: "email"});
        });
        it("should have a password input with correct ref and type", function() {
            ComponentTester.assert.equal(this.componentFormPasswordInput.type, "input");
            ComponentTester.assert.equal(this.componentFormPasswordInput.ref, "passwordInput");
            ComponentTester.assert.include(this.componentFormPasswordInput.props, {type: "password"});
        })
    });

    describe("RegisterPage Form Submission functionality", function() {
        before(function(done) {
            this.realComponent = TestUtils.renderIntoDocument(<RegisterPage/>);
            this.getCurrentState = function(){ return this.realComponent.state};
            this.realEmailInput = this.realComponent.refs.emailInput;
            this.realPasswordInput = this.realComponent.refs.passwordInput;
            this.realForm = this.realComponent.refs.registerForm;
            RouteTester.startServer(done);
        });
        after(function(done) {
            RouteTester.stopServer(done);
        });
        describe("Register Form Bad Submission", function() {
            it("should show error message on failed submission", function(done) {
                ComponentTester.assert.deepEqual(this.realComponent.state, {shouldShowErrorMessage: false, errorMessage: null});

                var emailInput = this.realEmailInput;
                var passwordInput = this.realPasswordInput;
                var form = this.realForm;

                emailInput.value = "emailing";
                passwordInput.value = "password";
                TestUtils.Simulate.change(emailInput);
                TestUtils.Simulate.change(passwordInput);
                var that = this;

                this.realComponent.handleSubmit(null, function() {
                    ComponentTester.assert.deepEqual(that.getCurrentState(), {shouldShowErrorMessage: true, errorMessage: null});
                    done();
                });
            })
        })

    });
});

/*
{ getDOMNode:
 { [Function: bound ]
 __reactBoundContext: [Circular],
 __reactBoundMethod: [Function],
 __reactBoundArguments: null,
 bind: [Function] },
 handleFailedSubmit:
 { [Function: bound ]
 __reactBoundContext: [Circular],
 __reactBoundMethod: [Function],
 __reactBoundArguments: null,
 bind: [Function] },
 handleSuccessfulSubmit:
 { [Function: bound ]
 __reactBoundContext: [Circular],
 __reactBoundMethod: [Function],
 __reactBoundArguments: null,
 bind: [Function] },
 handleSubmit:
 { [Function: bound ]
 __reactBoundContext: [Circular],
 __reactBoundMethod: [Function],
 __reactBoundArguments: null,
 bind: [Function] },
 props: {},
 context: {},
 refs:
 { emailInput:
 Element {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 5,
 _memoizedQueries: {},
 _readonly: false,
 _namespaceURI: 'http://www.w3.org/1999/xhtml',
 _prefix: null,
 _localName: 'input',
 _attributes: [Object],
 _settingCssText: false,
 _style: [Object],
 _classList: [Object],
 _reactInternalComponent: [Object],
 getDOMNode: [Function: legacyGetDOMNode],
 isMounted: [Function: legacyIsMounted],
 setState: [Function: legacySetStateEtc],
 replaceState: [Function: legacySetStateEtc],
 forceUpdate: [Function: legacySetStateEtc],
 setProps: [Function: legacySetProps],
 replaceProps: [Function: legacyReplaceProps] },
 passwordInput:
 Element {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 5,
 _memoizedQueries: {},
 _readonly: false,
 _namespaceURI: 'http://www.w3.org/1999/xhtml',
 _prefix: null,
 _localName: 'input',
 _attributes: [Object],
 _settingCssText: false,
 _style: [Object],
 _classList: [Object],
 _reactInternalComponent: [Object],
 getDOMNode: [Function: legacyGetDOMNode],
 isMounted: [Function: legacyIsMounted],
 setState: [Function: legacySetStateEtc],
 replaceState: [Function: legacySetStateEtc],
 forceUpdate: [Function: legacySetStateEtc],
 setProps: [Function: legacySetProps],
 replaceProps: [Function: legacyReplaceProps] } },
 updater:
 { isMounted: [Function],
 enqueueCallback: [Function],
 enqueueCallbackInternal: [Function],
 enqueueForceUpdate: [Function],
 enqueueReplaceState: [Function],
 enqueueSetState: [Function],
 enqueueSetProps: [Function],
 enqueueSetPropsInternal: [Function],
 enqueueReplaceProps: [Function],
 enqueueReplacePropsInternal: [Function],
 enqueueElementInternal: [Function] },
 state: { shouldShowErrorMessage: false, errorMessage: null },
 _reactInternalInstance:
 { _currentElement:
 { '$$typeof': Symbol(react.element),
 type: [Object],
 key: null,
 ref: null,
 props: {},
 _owner: null,
 _store: {} },
 _rootNodeID: '.1',
 _instance: [Circular],
 _pendingElement: null,
 _pendingStateQueue: null,
 _pendingReplaceState: false,
 _pendingForceUpdate: false,
 _renderedComponent:
 ReactDOMComponent {
 _tag: 'div',
 _renderedChildren: [Object],
 _previousStyle: null,
 _previousStyleCopy: null,
 _rootNodeID: '.1',
 _wrapperState: null,
 _topLevelWrapper: null,
 _nodeWithLegacyProperties: null,
 _unprocessedContextDev: [Object],
 _processedContextDev: [Object],
 _currentElement: [Object],
 _mountIndex: 0,
 _mountImage: null,
 _isOwnerNecessary: false,
 _warnedAboutRefsInRender: false },
 _context: { '__validateDOMNesting_ancestorInfo$q4pctgiml6m9529': [Object] },
 _mountOrder: 3,
 _topLevelWrapper:
 { _currentElement: [Object],
 _rootNodeID: '.1',
 _instance: [Object],
 _pendingElement: null,
 _pendingStateQueue: null,
 _pendingReplaceState: false,
 _pendingForceUpdate: false,
 _renderedComponent: [Circular],
 _context: [Object],
 _mountOrder: 2,
 _topLevelWrapper: null,
 _pendingCallbacks: null,
 _mountIndex: 0,
 _mountImage: null,
 _isOwnerNecessary: false,
 _warnedAboutRefsInRender: false },
 _pendingCallbacks: null,
 _mountIndex: 0,
 _mountImage: null,
 _isOwnerNecessary: false,
 _warnedAboutRefsInRender: false } }*/




/*
 Element {
 _childNodesList: null,
 _ownerDocument:
 HTMLDocument {
 _childNodesList: NodeList { '0': [Object], '1': [Object] },
 _ownerDocument: [Circular],
 _childrenList: null,
 _version: 176,
 _memoizedQueries: { '1': [Object] },
 _readonly: false,
 _parsingMode: 'html',
 _htmlToDom:
 HtmlToDom {
 appendHtmlToElement: [Function],
 appendHtmlToDocument: [Function] },
 _implementation: { _ownerDocument: [Circular], _features: [Object] },
 _defaultView:
 Window {
 DOMException: [Object],
 NamedNodeMap: [Function: NamedNodeMap],
 DOMImplementation: [Function: DOMImplementation],
 Node: [Object],
 Element: [Object],
 DocumentFragment: [Function: DocumentFragment],
 Document: [Object],
 Attr: [Function: Attr],
 Event: [Object],
 MessageEvent: [Function: MessageEvent],
 ErrorEvent: [Function: ErrorEvent],
 HashChangeEvent: [Function: HashChangeEvent],
 ProgressEvent: [Function: ProgressEvent],
 CustomEvent: [Function: CustomEvent],
 UIEvent: [Function],
 MouseEvent: [Function],
 MutationEvent: [Function],
 EventTarget: [Function: EventTarget],
 languageProcessors: [Object],
 HTMLDocument: [Function: HTMLDocument],
 HTMLElement: [Object],
 HTMLUnknownElement: [Object],
 HTMLFormElement: [Object],
 HTMLLinkElement: [Object],
 HTMLMetaElement: [Object],
 HTMLHtmlElement: [Object],
 HTMLHeadElement: [Object],
 HTMLTitleElement: [Object],
 HTMLBaseElement: [Object],
 HTMLStyleElement: [Object],
 HTMLBodyElement: [Object],
 HTMLSelectElement: [Object],
 HTMLOptGroupElement: [Object],
 HTMLOptionElement: [Object],
 HTMLInputElement: [Object],
 HTMLTextAreaElement: [Object],
 HTMLButtonElement: [Object],
 HTMLLabelElement: [Object],
 HTMLFieldSetElement: [Object],
 HTMLLegendElement: [Object],
 HTMLUListElement: [Object],
 HTMLOListElement: [Object],
 HTMLDListElement: [Object],
 HTMLDirectoryElement: [Object],
 HTMLMenuElement: [Object],
 HTMLLIElement: [Object],
 HTMLCanvasElement: [Object],
 HTMLDivElement: [Object],
 HTMLParagraphElement: [Object],
 HTMLHeadingElement: [Object],
 HTMLQuoteElement: [Object],
 HTMLPreElement: [Object],
 HTMLBRElement: [Object],
 HTMLBaseFontElement: [Object],
 HTMLFontElement: [Object],
 HTMLHRElement: [Object],
 HTMLModElement: [Object],
 HTMLAnchorElement: [Object],
 HTMLImageElement: [Object],
 HTMLObjectElement: [Object],
 HTMLParamElement: [Object],
 HTMLAppletElement: [Object],
 HTMLMapElement: [Object],
 HTMLAreaElement: [Object],
 HTMLScriptElement: [Object],
 HTMLTableElement: [Object],
 HTMLTableCaptionElement: [Object],
 HTMLTableColElement: [Object],
 HTMLTableSectionElement: [Object],
 HTMLTableRowElement: [Object],
 HTMLTableCellElement: [Object],
 HTMLTableDataCellElement: [Object],
 HTMLTableHeaderCellElement: [Object],
 HTMLFrameSetElement: [Object],
 HTMLFrameElement: [Object],
 HTMLIFrameElement: [Object],
 HTMLMediaElement: [Object],
 HTMLVideoElement: [Object],
 HTMLAudioElement: [Object],
 HTMLDataElement: [Object],
 HTMLSpanElement: [Object],
 HTMLTimeElement: [Object],
 HTMLDataListElement: [Object],
 HTMLDialogElement: [Object],
 HTMLEmbedElement: [Object],
 HTMLMeterElement: [Object],
 HTMLOutputElement: [Object],
 HTMLProgressElement: [Object],
 HTMLSourceElement: [Object],
 HTMLTemplateElement: [Object],
 HTMLTrackElement: [Object],
 StyleSheet: [Function: StyleSheet],
 MediaList: [Function: MediaList],
 CSSStyleSheet: [Function: CSSStyleSheet],
 CSSRule: [Object],
 CSSStyleRule: [Object],
 CSSMediaRule: [Function: CSSMediaRule],
 CSSImportRule: [Function: CSSImportRule],
 CSSStyleDeclaration: [Function: CSSStyleDeclaration],
 StyleSheetList: [Function: StyleSheetList],
 UserDataHandler: [Function],
 DOMError: [Function],
 DOMConfiguration: [Function],
 DOMStringList: [Function],
 XPathException: [Object],
 XPathExpression: [Function: XPathExpression],
 XPathResult: [Object],
 XPathEvaluator: [Function: XPathEvaluator],
 DocumentType: [Function: DocumentType],
 CharacterData: [Function: CharacterData],
 ProcessingInstruction: [Function: ProcessingInstruction],
 Comment: [Function: Comment],
 Text: [Function: Text],
 HTMLCollection: [Function: HTMLCollection],
 NodeFilter: [Object],
 NodeIterator: [Function: NodeIterator],
 NodeList: [Function: NodeList],
 URL: [Object],
 Blob: [Function: Blob],
 File: [Function: File],
 FileList: [Function: FileList],
 FormData: [Function: FormData],
 XMLHttpRequestEventTarget: [Function: XMLHttpRequestEventTarget],
 XMLHttpRequestUpload: [Function: XMLHttpRequestUpload],
 DOMTokenList: [Function: DOMTokenList],
 Window: [Function: Window],
 _globalProxy: [Circular],
 __timers: [],
 _document: [Circular],
 _top: [Circular],
 _parent: [Circular],
 _length: 0,
 _virtualConsole: [Object],
 document: [Circular],
 frames: [Circular],
 length: 0,
 window: [Circular],
 parent: [Circular],
 top: [Circular],
 location: Location {},
 self: [Circular],
 addEventListener: [Function: bound addEventListener],
 removeEventListener: [Function: bound removeEventListener],
 dispatchEvent: [Function: bound dispatchEvent],
 setTimeout: [Function],
 setInterval: [Function],
 clearInterval: [Function: bound stopTimer],
 clearTimeout: [Function: bound stopTimer],
 __stopAllTimers: [Function: bound stopAllTimers],
 Image: [Function],
 postMessage: [Function],
 atob: [Function],
 btoa: [Function],
 FileReader: [Object],
 XMLHttpRequest: [Object],
 ArrayBuffer: [Function: ArrayBuffer],
 Int8Array: [Function: Int8Array],
 Uint8Array: [Function: Uint8Array],
 Uint8ClampedArray: [Function: Uint8ClampedArray],
 Int16Array: [Function: Int16Array],
 Uint16Array: [Function: Uint16Array],
 Int32Array: [Function: Int32Array],
 Uint32Array: [Function: Uint32Array],
 Float32Array: [Function: Float32Array],
 Float64Array: [Function: Float64Array],
 stop: [Function],
 close: [Function],
 getComputedStyle: [Function],
 history: [Object],
 console: [Object],
 navigator: [Object],
 name: 'nodejs',
 innerWidth: 1024,
 innerHeight: 768,
 outerWidth: 1024,
 outerHeight: 768,
 pageXOffset: 0,
 pageYOffset: 0,
 screenX: 0,
 screenY: 0,
 screenLeft: 0,
 screenTop: 0,
 scrollX: 0,
 scrollY: 0,
 scrollTop: 0,
 scrollLeft: 0,
 screen: [Object],
 alert: [Function],
 blur: [Function],
 confirm: [Function],
 createPopup: [Function],
 focus: [Function],
 moveBy: [Function],
 moveTo: [Function],
 open: [Function],
 print: [Function],
 prompt: [Function],
 resizeBy: [Function],
 resizeTo: [Function],
 scroll: [Function],
 scrollBy: [Function],
 scrollTo: [Function],
 toString: [Function] },
 _global:
 Window {
 DOMException: [Object],
 NamedNodeMap: [Function: NamedNodeMap],
 DOMImplementation: [Function: DOMImplementation],
 Node: [Object],
 Element: [Object],
 DocumentFragment: [Function: DocumentFragment],
 Document: [Object],
 Attr: [Function: Attr],
 Event: [Object],
 MessageEvent: [Function: MessageEvent],
 ErrorEvent: [Function: ErrorEvent],
 HashChangeEvent: [Function: HashChangeEvent],
 ProgressEvent: [Function: ProgressEvent],
 CustomEvent: [Function: CustomEvent],
 UIEvent: [Function],
 MouseEvent: [Function],
 MutationEvent: [Function],
 EventTarget: [Function: EventTarget],
 languageProcessors: [Object],
 HTMLDocument: [Function: HTMLDocument],
 HTMLElement: [Object],
 HTMLUnknownElement: [Object],
 HTMLFormElement: [Object],
 HTMLLinkElement: [Object],
 HTMLMetaElement: [Object],
 HTMLHtmlElement: [Object],
 HTMLHeadElement: [Object],
 HTMLTitleElement: [Object],
 HTMLBaseElement: [Object],
 HTMLStyleElement: [Object],
 HTMLBodyElement: [Object],
 HTMLSelectElement: [Object],
 HTMLOptGroupElement: [Object],
 HTMLOptionElement: [Object],
 HTMLInputElement: [Object],
 HTMLTextAreaElement: [Object],
 HTMLButtonElement: [Object],
 HTMLLabelElement: [Object],
 HTMLFieldSetElement: [Object],
 HTMLLegendElement: [Object],
 HTMLUListElement: [Object],
 HTMLOListElement: [Object],
 HTMLDListElement: [Object],
 HTMLDirectoryElement: [Object],
 HTMLMenuElement: [Object],
 HTMLLIElement: [Object],
 HTMLCanvasElement: [Object],
 HTMLDivElement: [Object],
 HTMLParagraphElement: [Object],
 HTMLHeadingElement: [Object],
 HTMLQuoteElement: [Object],
 HTMLPreElement: [Object],
 HTMLBRElement: [Object],
 HTMLBaseFontElement: [Object],
 HTMLFontElement: [Object],
 HTMLHRElement: [Object],
 HTMLModElement: [Object],
 HTMLAnchorElement: [Object],
 HTMLImageElement: [Object],
 HTMLObjectElement: [Object],
 HTMLParamElement: [Object],
 HTMLAppletElement: [Object],
 HTMLMapElement: [Object],
 HTMLAreaElement: [Object],
 HTMLScriptElement: [Object],
 HTMLTableElement: [Object],
 HTMLTableCaptionElement: [Object],
 HTMLTableColElement: [Object],
 HTMLTableSectionElement: [Object],
 HTMLTableRowElement: [Object],
 HTMLTableCellElement: [Object],
 HTMLTableDataCellElement: [Object],
 HTMLTableHeaderCellElement: [Object],
 HTMLFrameSetElement: [Object],
 HTMLFrameElement: [Object],
 HTMLIFrameElement: [Object],
 HTMLMediaElement: [Object],
 HTMLVideoElement: [Object],
 HTMLAudioElement: [Object],
 HTMLDataElement: [Object],
 HTMLSpanElement: [Object],
 HTMLTimeElement: [Object],
 HTMLDataListElement: [Object],
 HTMLDialogElement: [Object],
 HTMLEmbedElement: [Object],
 HTMLMeterElement: [Object],
 HTMLOutputElement: [Object],
 HTMLProgressElement: [Object],
 HTMLSourceElement: [Object],
 HTMLTemplateElement: [Object],
 HTMLTrackElement: [Object],
 StyleSheet: [Function: StyleSheet],
 MediaList: [Function: MediaList],
 CSSStyleSheet: [Function: CSSStyleSheet],
 CSSRule: [Object],
 CSSStyleRule: [Object],
 CSSMediaRule: [Function: CSSMediaRule],
 CSSImportRule: [Function: CSSImportRule],
 CSSStyleDeclaration: [Function: CSSStyleDeclaration],
 StyleSheetList: [Function: StyleSheetList],
 UserDataHandler: [Function],
 DOMError: [Function],
 DOMConfiguration: [Function],
 DOMStringList: [Function],
 XPathException: [Object],
 XPathExpression: [Function: XPathExpression],
 XPathResult: [Object],
 XPathEvaluator: [Function: XPathEvaluator],
 DocumentType: [Function: DocumentType],
 CharacterData: [Function: CharacterData],
 ProcessingInstruction: [Function: ProcessingInstruction],
 Comment: [Function: Comment],
 Text: [Function: Text],
 HTMLCollection: [Function: HTMLCollection],
 NodeFilter: [Object],
 NodeIterator: [Function: NodeIterator],
 NodeList: [Function: NodeList],
 URL: [Object],
 Blob: [Function: Blob],
 File: [Function: File],
 FileList: [Function: FileList],
 FormData: [Function: FormData],
 XMLHttpRequestEventTarget: [Function: XMLHttpRequestEventTarget],
 XMLHttpRequestUpload: [Function: XMLHttpRequestUpload],
 DOMTokenList: [Function: DOMTokenList],
 Window: [Function: Window],
 _globalProxy: [Object],
 __timers: [],
 _document: [Circular],
 _top: [Circular],
 _parent: [Circular],
 _length: 0,
 _virtualConsole: [Object],
 document: [Getter],
 frames: [Getter],
 length: [Getter],
 window: [Getter],
 parent: [Getter],
 top: [Getter],
 location: [Getter],
 self: [Getter],
 addEventListener: [Function: bound addEventListener],
 removeEventListener: [Function: bound removeEventListener],
 dispatchEvent: [Function: bound dispatchEvent],
 setTimeout: [Function],
 setInterval: [Function],
 clearInterval: [Function: bound stopTimer],
 clearTimeout: [Function: bound stopTimer],
 __stopAllTimers: [Function: bound stopAllTimers],
 Image: [Function],
 postMessage: [Function],
 atob: [Function],
 btoa: [Function],
 FileReader: [Object],
 XMLHttpRequest: [Object],
 ArrayBuffer: [Function: ArrayBuffer],
 Int8Array: [Function: Int8Array],
 Uint8Array: [Function: Uint8Array],
 Uint8ClampedArray: [Function: Uint8ClampedArray],
 Int16Array: [Function: Int16Array],
 Uint16Array: [Function: Uint16Array],
 Int32Array: [Function: Int32Array],
 Uint32Array: [Function: Uint32Array],
 Float32Array: [Function: Float32Array],
 Float64Array: [Function: Float64Array],
 stop: [Function],
 close: [Function],
 getComputedStyle: [Function],
 history: [Object],
 console: [Object],
 navigator: [Object],
 name: 'nodejs',
 innerWidth: 1024,
 innerHeight: 768,
 outerWidth: 1024,
 outerHeight: 768,
 pageXOffset: 0,
 pageYOffset: 0,
 screenX: 0,
 screenY: 0,
 screenLeft: 0,
 screenTop: 0,
 scrollX: 0,
 scrollY: 0,
 scrollTop: 0,
 scrollLeft: 0,
 screen: [Object],
 alert: [Function],
 blur: [Function],
 confirm: [Function],
 createPopup: [Function],
 focus: [Function],
 moveBy: [Function],
 moveTo: [Function],
 open: [Function],
 print: [Function],
 prompt: [Function],
 resizeBy: [Function],
 resizeTo: [Function],
 scroll: [Function],
 scrollBy: [Function],
 scrollTo: [Function],
 toString: [Function] },
 _documentElement:
 Element {
 _childNodesList: null,
 _ownerDocument: [Circular],
 _childrenList: null,
 _version: 4,
 _memoizedQueries: {},
 _readonly: false,
 _namespaceURI: 'http://www.w3.org/1999/xhtml',
 _prefix: null,
 _localName: 'html',
 _attributes: NamedNodeMap {},
 _settingCssText: false,
 _style: [Object],
 _attached: true,
 _attachedToDocument: true },
 _ids: {},
 _attached: true,
 _currentScript: null,
 _cookieJar: CookieJar { enableLooseMode: true, store: { idx: {} } },
 _contentType: 'text/html',
 _URL: 'about:blank',
 _location: Location {},
 _activeNodeIterators: [],
 _activeNodeIteratorsMax: 10,
 _referrer: undefined,
 _queue: { paused: false, tail: null },
 _customResourceLoader: undefined,
 readyState: 'complete',
 _nwmatcher:
 { ACCEPT_NODE: 'r[r.length]=c[k];if(f&&false===f(c[k]))break main;else continue main;',
 byId: [Function],
 match: [Function],
 first: [Function],
 select: [Function],
 compile: [Function],
 contains: [Function],
 configure: [Function],
 getAttribute: [Function],
 hasAttribute: [Function],
 setCache: [Function],
 shortcuts: [Function],
 loadResults: [Function],
 saveResults: [Function],
 emit: [Function],
 Config: [Object],
 Snapshot: [Object],
 Operators: [Object],
 Selectors: {},
 Version: 'nwmatcher-1.3.7',
 registerOperator: [Function],
 registerSelector: [Function] },
 _reactListenersID40772599820047617: 0 },
 _childrenList: null,
 _version: 5,
 _memoizedQueries: {},
 _readonly: false,
 _namespaceURI: 'http://www.w3.org/1999/xhtml',
 _prefix: null,
 _localName: 'input',
 _attributes:
 NamedNodeMap {
 '0':
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'form-control',
 _name: 'class',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'class',
 _prefix: null },
 '1':
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'userEmail',
 _name: 'id',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'id',
 _prefix: null },
 '2':
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'email',
 _name: 'type',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'type',
 _prefix: null },
 '3':
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'email@email.com',
 _name: 'placeholder',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'placeholder',
 _prefix: null },
 '4':
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: '.1.0.2.1.0',
 _name: 'data-reactid',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'data-reactid',
 _prefix: null },
 class:
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'form-control',
 _name: 'class',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'class',
 _prefix: null },
 id:
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'userEmail',
 _name: 'id',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'id',
 _prefix: null },
 type:
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'email',
 _name: 'type',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'type',
 _prefix: null },
 placeholder:
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: 'email@email.com',
 _name: 'placeholder',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'placeholder',
 _prefix: null },
 'data-reactid':
 Attr {
 _childNodesList: null,
 _ownerDocument: [Object],
 _childrenList: null,
 _version: 1,
 _memoizedQueries: {},
 _readonly: false,
 _valueForAttrModified: '.1.0.2.1.0',
 _name: 'data-reactid',
 _ownerElement: [Circular],
 _namespaceURI: null,
 _localName: 'data-reactid',
 _prefix: null } },
 _settingCssText: false,
 _style:
 CSSStyleDeclaration {
 _values: {},
 _importants: {},
 _length: 0,
 _onChange: [Function: onCssTextChange] },
 _classList: DOMTokenList { '0': 'form-control' },
 _reactInternalComponent:
 ReactDOMComponent {
 _tag: 'input',
 _renderedChildren: null,
 _previousStyle: null,
 _previousStyleCopy: null,
 _rootNodeID: '.1.0.2.1.0',
 _wrapperState:
 { initialChecked: false,
 initialValue: null,
 onChange: [Function: bound _handleChange] },
 _topLevelWrapper: null,
 _nodeWithLegacyProperties: [Circular],
 _unprocessedContextDev: { '__validateDOMNesting_ancestorInfo$d7wa83unb2c323xr': [Object] },
 _processedContextDev: { '__validateDOMNesting_ancestorInfo$d7wa83unb2c323xr': [Object] },
 _currentElement:
 { '$$typeof': Symbol(react.element),
 type: 'input',
 key: null,
 ref: 'emailInput',
 props: [Object],
 _owner: [Object],
 _store: {} },
 _mountIndex: 0,
 _mountImage: null,
 _isOwnerNecessary: false,
 _warnedAboutRefsInRender: false },
 getDOMNode: [Function: legacyGetDOMNode],
 isMounted: [Function: legacyIsMounted],
 setState: [Function: legacySetStateEtc],
 replaceState: [Function: legacySetStateEtc],
 forceUpdate: [Function: legacySetStateEtc],
 setProps: [Function: legacySetProps],
*/